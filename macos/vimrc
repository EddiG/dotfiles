set nocompatible

call plug#begin('~/.vim/plugged')

" Theme
Plug 'morhetz/gruvbox'

" Explore
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jlanzarotta/bufexplorer'
Plug 'vim-airline/vim-airline'

" Editor
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
" It's a nice tool...but I don't use it much
" Plug 'tpope/vim-fugitive'

" Syntax highlighter for almost all languages
Plug 'sheerun/vim-polyglot'

" Intellisense autocompletion
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ervandew/supertab'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'

" Checker
Plug 'w0rp/ale'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'https://github.com/EddiG/vim-snippets.git'

" Cheat sheets
" Accessable via <leader>KB or <leader>KK
" Plug 'dbeniamine/cheat.sh-vim'

" Dev Icons
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

call plug#end()

syntax on

" Set the leader key
let mapleader = ","
noremap \ ,

" Theme
let g:gruvbox_italic = 1
set background=dark
colorscheme gruvbox

" Allow switching from not saved buffer
set hidden

" Ask confirmation if there is not saved buffer and I'm trying to quit from vim
set confirm

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Ignore letter case in search pattern
set ignorecase

" Honor letter case if the pattern contains uppercase letters
set smartcase

" Show suggestions in the command pallete
set wildmenu

" Highlighting the search result
set hlsearch

" Show line number
set number

" Better display for messages
"set cmdheight=2

" Turn off unnecessary backups
set nobackup
set noswapfile
set nowb

set autoindent
set expandtab
set softtabstop=2
set shiftwidth=2
set tabstop=2

" This will cause Vim to treat all numerals as decimal,
" regardless of whether they are padded with zeros.
set nrformats=

" Allow per-project configuration
set exrc
set secure

" Map <Esc> to exit terminal-mode:
tnoremap <Esc> <C-\><C-n>

" Apply bash_profile on login in terminal
let &shell='/bin/bash --rcfile ~/.bash_profile'

" Paste with placing the replaced content in 'the black hole register'
vnoremap p "_dP

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" " ================ Intellisense engine ===================
" " Use `[g` and `]g` to navigate diagnostics
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)

" " Remap keys for gotos
" nmap <silent> <leader>d <Plug>(coc-definition)
" nmap <silent> <leader>y <Plug>(coc-type-definition)
" nmap <silent> <leader>i <Plug>(coc-implementation)
" nmap <silent> <leader>r <Plug>(coc-references)

" " Remap for rename current word
" nmap <leader>rn <Plug>(coc-rename)

" " Remap for do codeAction of current line
" nmap <leader>ac  <Plug>(coc-codeaction)

" " Use K to show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>

" function! s:show_documentation()
"   if (index(['vim','help'], &filetype) >= 0)
"     execute 'h '.expand('<cword>')
"   else
"     call CocAction('doHover')
"   endif
" endfunction

" " Use tab for trigger completion with characters ahead and navigate.
" " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" " Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()
" " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" " Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" " ========================================================

" ================ Linting & Formatting ==================
" ALE (Asynchronus Lint Engine)
" Use these configuration options per project
"
" let g:ale_linters = {}
" let g:ale_linters['javascript'] = ['eslint']
" let g:ale_javascript_eslint_use_global = 0
" let g:ale_javascript_eslint_suppress_missing_config = 1
" let g:ale_javascript_eslint_suppress_eslintignore = 1

let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['javascriptreact'] = ['prettier']
let g:ale_fixers['graphql'] = ['prettier']
let g:ale_fixers['json'] = ['prettier']
let g:ale_fixers['css'] = ['prettier']

" pip3 install black flake8
let g:ale_linters = {}
let g:ale_linters['python'] = ['flake8']
let g:ale_fixers['python'] = ['black']

" install xmllint first
let g:ale_fixers['xml'] = ['xmllint']

" nnoremap <silent> <Leader>d :ALEGoToDefinition<CR>
" nnoremap <silent> <Leader>r :ALEFindReferences<CR>
" ========================================================

" Deoplete (autocomplete)
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 1

" NERDTree
nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = "\u00a0"
let g:NERDTreeDirArrowCollapsible = "\u00a0"

" Fuzzy searcher (fzf)
" brew install fzf ripgrep
nmap <C-p> :Files<CR>
nmap <C-f> :Rg<CR>

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_powerline_fonts = 1
set laststatus=2

" Bufexplorer
let g:bufExplorerDisableDefaultKeyMapping = 1
let g:bufExplorerDetailedHelp = 1
let g:bufExplorerShowRelativePath = 1
let g:bufExplorerShowTabBuffer = 1
let g:bufExplorerSortBy = 'fullpath'
let g:bufExplorerSplitBelow = 1
let g:bufExplorerSplitRight = 1
let g:bufExplorerSplitOutPathName = 0
nnoremap <leader>b :BufExplorer<CR>
nnoremap <Leader>l :ls<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

" Supertab
let g:SuperTabMappingForward='<s-tab>'
let g:SuperTabMappingBackward='<tab>'

" Dev Icons
let g:DevIconsEnableFoldersOpenClose = 1

" Fold/Unfold trigger
nmap <silent> <leader>f za

" Map ctrl-movement keys to window switching
nmap <silent> <C-k> <C-w><Up>
nmap <silent> <C-j> <C-w><Down>
nmap <silent> <C-l> <C-w><Right>
nmap <silent> <C-h> <C-w><Left>

" Map keys for window resizing
nmap <silent> <C-n> <C-w><
nmap <silent> - <C-w>-
nmap <silent> = <C-w>+
nmap <silent> <C-m> <C-w>>

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable fold for JSON
" autocmd FileType json set foldmethod=syntax 

" Non standard files 
autocmd BufRead,BufNewFile .babelrc,.eslintrc,.prettierrc,*.geojson set filetype=json
autocmd BufRead,BufNewFile *.prisma set filetype=graphql
autocmd BufRead,BufNewFile *.toml set filetype=yaml

" Trigger configuration (Optional)
let g:UltiSnipsExpandTrigger="<C-l>"
