call plug#begin('~/.vim/plugged')
" Theme
Plug 'morhetz/gruvbox'

" Explore
" Plug 'mcchrish/nnn.vim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'kyazdani42/nvim-tree.lua'
Plug 'hoob3rt/lualine.nvim'
" Plug 'christoomey/vim-tmux-navigator'

" Editor
Plug 'windwp/nvim-autopairs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'lewis6991/gitsigns.nvim'
Plug 'norcalli/nvim-colorizer.lua'

" Syntax highlighter for almost all languages
Plug 'sheerun/vim-polyglot'

" Completion
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'

" Language Server Protocol
Plug 'neovim/nvim-lspconfig'
Plug 'folke/trouble.nvim'

" Formatter
Plug 'mhartington/formatter.nvim'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'https://github.com/EddiG/vim-snippets.git'

" Disable features those slow down the loading of a huge file
Plug 'mhinz/vim-hugefile'

" Cheat sheets
" Accessable via <leader>KB or <leader>KK
" Plug 'dbeniamine/cheat.sh-vim'

" Dev Icons
Plug 'kyazdani42/nvim-web-devicons'
call plug#end()

" Set the leader key
let mapleader = ","
noremap \ ,

" Theme
let g:gruvbox_italic = 1
set background=dark
colorscheme gruvbox
highlight Comment cterm=italic gui=italic

" Allow switching from not saved buffer
set hidden
" Ask confirmation if there is not saved buffer and I'm trying to quit from vim
set confirm
" Don't redraw while executing macros (good performance config)
set lazyredraw
" Ignore letter case in search pattern
set ignorecase
" Honor letter case if the pattern contains uppercase letters
set smartcase
" Show suggestions in the command pallete
set wildmenu
" Highlighting the search result
set hlsearch
" Show line number
set number

" Better display for messages
"set cmdheight=2

" Turn off unnecessary backups
set nobackup
set noswapfile
set nowb

set autoindent
set expandtab
set softtabstop=2
set shiftwidth=2
set tabstop=2

" This will cause Vim to treat all numerals as decimal,
" regardless of whether they are padded with zeros.
set nrformats=

" Allow per-project configuration
set exrc
set secure

" Map <Esc> to exit terminal-mode:
tnoremap <Esc> <C-\><C-n>

" Insert real tab
inoremap <S-Tab> <C-V><Tab>

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" ============== Language Server Protocol  ===============
lua << EOF
local lspconfig = require "lspconfig"

local on_attach = function(client, bufnr)
  -- vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
  client.resolved_capabilities.document_formatting = false
end

local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())

-- yarn global add typescript typescript-language-server
local servers = { 'tsserver' }
for _, lsp in pairs(servers) do
  lspconfig[lsp].setup {
    capabilities = capabilities,
    on_attach = on_attach,
    flags = {
      -- This will be the default in neovim 0.7+
      debounce_text_changes = 150,
    }
  }
end

-- yarn global add diagnostic-languageserver eslint_d
lspconfig['diagnosticls'].setup {
  filetypes = {"javascript", "javascriptreact", "typescript", "typescriptreact"},
  init_options = {
    filetypes = {
      javascript = "eslint",
      typescript = "eslint",
      javascriptreact = "eslint",
      typescriptreact = "eslint"
    },
    linters = {
      eslint = {
        sourceName = "eslint",
        command = "eslint_d",
        rootPatterns = {
          ".eslintrc.js",
          "package.json"
        },
        debounce = 100,
        args = {
          "--cache",
          "--stdin",
          "--stdin-filename",
          "%filepath",
          "--format",
          "json"
        },
        parseJson = {
          errorsRoot = "[0].messages",
          line = "line",
          column = "column",
          endLine = "endLine",
          endColumn = "endColumn",
          message = "${message} [${ruleId}]",
          security = "severity"
        },
        securities = {
          [2] = "error",
          [1] = "warning"
        }
      }
    }
  }
}
EOF
nnoremap <silent>gd    <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent>gh    <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent>gD    <cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap <silent>gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent>gR    <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap <silent>gca <cmd>:Telescope lsp_code_actions<CR>
nnoremap <silent><C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent><leader>fo <cmd>lua vim.lsp.buf.formatting()<CR>

lua << EOF
require("trouble").setup {
  icons = true,
  mode = "document_diagnostics", -- "workspace_diagnostics", "document_diagnostics", "quickfix", "lsp_references", "loclist"
  fold_open = "",
  fold_closed = "",
  signs = {
      error = "",
      warning = "",
      hint = "",
      information = "",
  },
  --use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client
}

local signs = { Error = "", Warn = "", Hint = "", Info = "" }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end
EOF
nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
nnoremap gr <cmd>TroubleToggle lsp_references<cr>

" Git signs
lua << EOF
require('gitsigns').setup({
  current_line_blame = true,
  signcolumn = false,
  numhl = true,
  linehl = false
})
EOF
" ========================================================

" ==================== Formatting ========================
lua << EOF
local prettier = function() 
  return {
    exe = "prettier",
    args = {"--stdin-filepath", vim.api.nvim_buf_get_name(0)},
    stdin = true
  }
end

require('formatter').setup(
  {
      logging = false,
      filetype = {
        typescript = { prettier },
        typescriptreact = { prettier },
        javascript = { prettier },
        javascriptreact = { prettier },
        json = { prettier },
        html = { prettier },
        css = { prettier },
        xml = { prettier },
     }
  }
)
EOF
nnoremap <silent> <leader>f :Format<CR>
augroup AutoFormat
  autocmd!
  autocmd BufWritePost *.js,*.jsx,*.ts,*.tsx,*.css,*.scss,*.html,*.json FormatWrite
augroup END
" ========================================================

" ====================== Completion ======================
lua <<EOF
local cmp = require('cmp')
cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },
  sources = {
    { name = 'ultisnips' },
    { name = 'buffer', max_item_count = 10 },
    { name = 'nvim_lsp', max_item_count = 10 },
  },
  matching = {
    disallow_fuzzy_matching = false,
    disallow_partial_matching = false,
    disallow_prefix_unmatching = false,
  },
  sorting = {
    priority_weight = 2,
    comparators = {
      cmp.config.compare.offset,
      cmp.config.compare.exact,
      cmp.config.compare.score,
      cmp.config.compare.recently_used,
      cmp.config.compare.kind,
      cmp.config.compare.sort_text,
      cmp.config.compare.length,
      cmp.config.compare.order,
    }
  },
  mapping = {
    ['<C-j>'] = cmp.mapping(cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }), { 'i', 'c' }),
    ['<C-k>'] = cmp.mapping(cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }), { 'i', 'c' }),
    ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
    ['<C-y>'] = cmp.config.disable,
    ['<C-e>'] = cmp.config.disable,
    ['<S-Tab>'] = cmp.config.disable,
    ["<Tab>"] = cmp.mapping(function(fallback)
      if cmp.visible() then
        local entry = cmp.get_selected_entry()
        if not entry then
          cmp.select_next_item({ behavior = cmp.SelectBehavior.Insert })
        else
          cmp.confirm({ select = true })
        end
      else
        -- fallback()
      end
    end, {"i","s","c",}),
  },
  experimental = {
    ghost_text = true
  }
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

-- autopairs setup
require('nvim-autopairs').setup()
local cmp_autopairs = require('nvim-autopairs.completion.cmp')
cmp.event:on( 'confirm_done', cmp_autopairs.on_confirm_done({  map_char = { tex = '' } }))
EOF
" ========================================================

" ====================== Navigation ======================
lua << EOF
require('telescope').setup {
  defaults = {
    mappings = {
      i = {
        -- map actions.which_key to <C-h> (default: <C-/>)
        -- actions.which_key shows the mappings for your picker,
        -- e.g. git_{create, delete, ...}_branch for the git_branches picker
        ["<C-h>"] = "which_key",
        ["<C-j>"] = "move_selection_next",
        ["<C-k>"] = "move_selection_previous",
        ["<C-o>"] = "select_default"
      }
    }
  },
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}
require('telescope').load_extension('fzf')
EOF
nnoremap <C-p> <cmd>Telescope find_files<cr>
nnoremap <C-f> <cmd>Telescope live_grep<cr>
nnoremap <C-b> <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Lualine
lua << END
require('lualine').setup {
  options = {
    theme = 'auto',
    disabled_types = { 'NvimTree' }
  }
}
END

" NvimTree
lua << END
require'nvim-tree'.setup {
  --auto_close = true,
  auto_reload_on_write = true,
  filters = {
    dotfiles = true,
    custom = {},
    exclude = {},
  },
}
END
set termguicolors
highlight NvimTreeFolderName guifg=#acb21f
let g:nvim_tree_indent_markers = 1
let g:nvim_tree_git_hl = 1
let g:nvim_tree_special_files = {}
nnoremap <leader><leader> :NvimTreeToggle<CR>
nnoremap <C-\> :NvimTreeFindFile<CR>

" Buffer
nnoremap <Leader>l :ls<CR>
nnoremap <Leader>g :e#<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

" Colorizer
lua <<EOF
require('colorizer').setup()
EOF

" Trigger configuration (Optional)
" let g:UltiSnipsExpandTrigger="<C-l>"

" Fold/Unfold trigger
nmap <silent> <leader>f za

" Map ctrl-movement keys to window switching
nmap <silent> <C-k> <C-w><Up>
nmap <silent> <C-j> <C-w><Down>
nmap <silent> <C-l> <C-w><Right>
nmap <silent> <C-h> <C-w><Left>

" Map keys for window resizing
nmap <silent> <C-n> <C-w><
nmap <silent> - <C-w>-
nmap <silent> = <C-w>+
nmap <silent> <C-m> <C-w>>

" vim + tmux navigation
" let g:tmux_navigator_no_mappings = 1
" nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
" nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
" nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
" nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable fold for JSON
" autocmd FileType json set foldmethod=syntax 

" Non standard files 
autocmd BufRead,BufNewFile .babelrc,.eslintrc,.prettierrc,*.geojson set filetype=json
autocmd BufRead,BufNewFile *.prisma set filetype=graphql
autocmd BufRead,BufNewFile *.toml set filetype=yaml

